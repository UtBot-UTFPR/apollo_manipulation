# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msg/status_arm.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class status_arm(genpy.Message):
  _md5sum = "c3c5e83e349a8305c77eff5da188ae4a"
  _type = "custom_msg/status_arm"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string junta
float32 pulsos_setpoint
float32 pulsos_contados
float32 pulsos_erro
float32 output_P
float32 output_I
float32 output_D
float32 output_PID
float32 loop_time
bool IsDone"""
  __slots__ = ['junta','pulsos_setpoint','pulsos_contados','pulsos_erro','output_P','output_I','output_D','output_PID','loop_time','IsDone']
  _slot_types = ['string','float32','float32','float32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       junta,pulsos_setpoint,pulsos_contados,pulsos_erro,output_P,output_I,output_D,output_PID,loop_time,IsDone

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(status_arm, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.junta is None:
        self.junta = ''
      if self.pulsos_setpoint is None:
        self.pulsos_setpoint = 0.
      if self.pulsos_contados is None:
        self.pulsos_contados = 0.
      if self.pulsos_erro is None:
        self.pulsos_erro = 0.
      if self.output_P is None:
        self.output_P = 0.
      if self.output_I is None:
        self.output_I = 0.
      if self.output_D is None:
        self.output_D = 0.
      if self.output_PID is None:
        self.output_PID = 0.
      if self.loop_time is None:
        self.loop_time = 0.
      if self.IsDone is None:
        self.IsDone = False
    else:
      self.junta = ''
      self.pulsos_setpoint = 0.
      self.pulsos_contados = 0.
      self.pulsos_erro = 0.
      self.output_P = 0.
      self.output_I = 0.
      self.output_D = 0.
      self.output_PID = 0.
      self.loop_time = 0.
      self.IsDone = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.junta
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8fB().pack(_x.pulsos_setpoint, _x.pulsos_contados, _x.pulsos_erro, _x.output_P, _x.output_I, _x.output_D, _x.output_PID, _x.loop_time, _x.IsDone))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.junta = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.junta = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.pulsos_setpoint, _x.pulsos_contados, _x.pulsos_erro, _x.output_P, _x.output_I, _x.output_D, _x.output_PID, _x.loop_time, _x.IsDone,) = _get_struct_8fB().unpack(str[start:end])
      self.IsDone = bool(self.IsDone)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.junta
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8fB().pack(_x.pulsos_setpoint, _x.pulsos_contados, _x.pulsos_erro, _x.output_P, _x.output_I, _x.output_D, _x.output_PID, _x.loop_time, _x.IsDone))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.junta = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.junta = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.pulsos_setpoint, _x.pulsos_contados, _x.pulsos_erro, _x.output_P, _x.output_I, _x.output_D, _x.output_PID, _x.loop_time, _x.IsDone,) = _get_struct_8fB().unpack(str[start:end])
      self.IsDone = bool(self.IsDone)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8fB = None
def _get_struct_8fB():
    global _struct_8fB
    if _struct_8fB is None:
        _struct_8fB = struct.Struct("<8fB")
    return _struct_8fB
