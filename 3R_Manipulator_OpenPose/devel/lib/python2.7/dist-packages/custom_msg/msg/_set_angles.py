# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msg/set_angles.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class set_angles(genpy.Message):
  _md5sum = "f893037d084fc53525471a607a7aa8b3"
  _type = "custom_msg/set_angles"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 set_OMB
float32 set_COT
float32 set_PUN
bool 	set_GAR

bool 	reset
bool 	retry
bool 	emergency_stop

float32 set_Kp_PUN
float32 set_Ki_PUN
float32 set_Kd_PUN

float32 set_Kp_OMB
float32 set_Ki_OMB
float32 set_Kd_OMB

float32 set_Kp_GAR
float32 set_Ki_GAR
float32 set_Kd_GAR
"""
  __slots__ = ['set_OMB','set_COT','set_PUN','set_GAR','reset','retry','emergency_stop','set_Kp_PUN','set_Ki_PUN','set_Kd_PUN','set_Kp_OMB','set_Ki_OMB','set_Kd_OMB','set_Kp_GAR','set_Ki_GAR','set_Kd_GAR']
  _slot_types = ['float32','float32','float32','bool','bool','bool','bool','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       set_OMB,set_COT,set_PUN,set_GAR,reset,retry,emergency_stop,set_Kp_PUN,set_Ki_PUN,set_Kd_PUN,set_Kp_OMB,set_Ki_OMB,set_Kd_OMB,set_Kp_GAR,set_Ki_GAR,set_Kd_GAR

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(set_angles, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.set_OMB is None:
        self.set_OMB = 0.
      if self.set_COT is None:
        self.set_COT = 0.
      if self.set_PUN is None:
        self.set_PUN = 0.
      if self.set_GAR is None:
        self.set_GAR = False
      if self.reset is None:
        self.reset = False
      if self.retry is None:
        self.retry = False
      if self.emergency_stop is None:
        self.emergency_stop = False
      if self.set_Kp_PUN is None:
        self.set_Kp_PUN = 0.
      if self.set_Ki_PUN is None:
        self.set_Ki_PUN = 0.
      if self.set_Kd_PUN is None:
        self.set_Kd_PUN = 0.
      if self.set_Kp_OMB is None:
        self.set_Kp_OMB = 0.
      if self.set_Ki_OMB is None:
        self.set_Ki_OMB = 0.
      if self.set_Kd_OMB is None:
        self.set_Kd_OMB = 0.
      if self.set_Kp_GAR is None:
        self.set_Kp_GAR = 0.
      if self.set_Ki_GAR is None:
        self.set_Ki_GAR = 0.
      if self.set_Kd_GAR is None:
        self.set_Kd_GAR = 0.
    else:
      self.set_OMB = 0.
      self.set_COT = 0.
      self.set_PUN = 0.
      self.set_GAR = False
      self.reset = False
      self.retry = False
      self.emergency_stop = False
      self.set_Kp_PUN = 0.
      self.set_Ki_PUN = 0.
      self.set_Kd_PUN = 0.
      self.set_Kp_OMB = 0.
      self.set_Ki_OMB = 0.
      self.set_Kd_OMB = 0.
      self.set_Kp_GAR = 0.
      self.set_Ki_GAR = 0.
      self.set_Kd_GAR = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f4B9f().pack(_x.set_OMB, _x.set_COT, _x.set_PUN, _x.set_GAR, _x.reset, _x.retry, _x.emergency_stop, _x.set_Kp_PUN, _x.set_Ki_PUN, _x.set_Kd_PUN, _x.set_Kp_OMB, _x.set_Ki_OMB, _x.set_Kd_OMB, _x.set_Kp_GAR, _x.set_Ki_GAR, _x.set_Kd_GAR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.set_OMB, _x.set_COT, _x.set_PUN, _x.set_GAR, _x.reset, _x.retry, _x.emergency_stop, _x.set_Kp_PUN, _x.set_Ki_PUN, _x.set_Kd_PUN, _x.set_Kp_OMB, _x.set_Ki_OMB, _x.set_Kd_OMB, _x.set_Kp_GAR, _x.set_Ki_GAR, _x.set_Kd_GAR,) = _get_struct_3f4B9f().unpack(str[start:end])
      self.set_GAR = bool(self.set_GAR)
      self.reset = bool(self.reset)
      self.retry = bool(self.retry)
      self.emergency_stop = bool(self.emergency_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f4B9f().pack(_x.set_OMB, _x.set_COT, _x.set_PUN, _x.set_GAR, _x.reset, _x.retry, _x.emergency_stop, _x.set_Kp_PUN, _x.set_Ki_PUN, _x.set_Kd_PUN, _x.set_Kp_OMB, _x.set_Ki_OMB, _x.set_Kd_OMB, _x.set_Kp_GAR, _x.set_Ki_GAR, _x.set_Kd_GAR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.set_OMB, _x.set_COT, _x.set_PUN, _x.set_GAR, _x.reset, _x.retry, _x.emergency_stop, _x.set_Kp_PUN, _x.set_Ki_PUN, _x.set_Kd_PUN, _x.set_Kp_OMB, _x.set_Ki_OMB, _x.set_Kd_OMB, _x.set_Kp_GAR, _x.set_Ki_GAR, _x.set_Kd_GAR,) = _get_struct_3f4B9f().unpack(str[start:end])
      self.set_GAR = bool(self.set_GAR)
      self.reset = bool(self.reset)
      self.retry = bool(self.retry)
      self.emergency_stop = bool(self.emergency_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f4B9f = None
def _get_struct_3f4B9f():
    global _struct_3f4B9f
    if _struct_3f4B9f is None:
        _struct_3f4B9f = struct.Struct("<3f4B9f")
    return _struct_3f4B9f
