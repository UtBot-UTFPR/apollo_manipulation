// Generated by gencpp from file custom_msg/status_arm.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_MESSAGE_STATUS_ARM_H
#define CUSTOM_MSG_MESSAGE_STATUS_ARM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg
{
template <class ContainerAllocator>
struct status_arm_
{
  typedef status_arm_<ContainerAllocator> Type;

  status_arm_()
    : junta()
    , pulsos_setpoint(0.0)
    , pulsos_contados(0.0)
    , pulsos_erro(0.0)
    , output_P(0.0)
    , output_I(0.0)
    , output_D(0.0)
    , output_PID(0.0)
    , loop_time(0.0)
    , IsDone(false)  {
    }
  status_arm_(const ContainerAllocator& _alloc)
    : junta(_alloc)
    , pulsos_setpoint(0.0)
    , pulsos_contados(0.0)
    , pulsos_erro(0.0)
    , output_P(0.0)
    , output_I(0.0)
    , output_D(0.0)
    , output_PID(0.0)
    , loop_time(0.0)
    , IsDone(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _junta_type;
  _junta_type junta;

   typedef float _pulsos_setpoint_type;
  _pulsos_setpoint_type pulsos_setpoint;

   typedef float _pulsos_contados_type;
  _pulsos_contados_type pulsos_contados;

   typedef float _pulsos_erro_type;
  _pulsos_erro_type pulsos_erro;

   typedef float _output_P_type;
  _output_P_type output_P;

   typedef float _output_I_type;
  _output_I_type output_I;

   typedef float _output_D_type;
  _output_D_type output_D;

   typedef float _output_PID_type;
  _output_PID_type output_PID;

   typedef float _loop_time_type;
  _loop_time_type loop_time;

   typedef uint8_t _IsDone_type;
  _IsDone_type IsDone;





  typedef boost::shared_ptr< ::custom_msg::status_arm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg::status_arm_<ContainerAllocator> const> ConstPtr;

}; // struct status_arm_

typedef ::custom_msg::status_arm_<std::allocator<void> > status_arm;

typedef boost::shared_ptr< ::custom_msg::status_arm > status_armPtr;
typedef boost::shared_ptr< ::custom_msg::status_arm const> status_armConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg::status_arm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg::status_arm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg::status_arm_<ContainerAllocator1> & lhs, const ::custom_msg::status_arm_<ContainerAllocator2> & rhs)
{
  return lhs.junta == rhs.junta &&
    lhs.pulsos_setpoint == rhs.pulsos_setpoint &&
    lhs.pulsos_contados == rhs.pulsos_contados &&
    lhs.pulsos_erro == rhs.pulsos_erro &&
    lhs.output_P == rhs.output_P &&
    lhs.output_I == rhs.output_I &&
    lhs.output_D == rhs.output_D &&
    lhs.output_PID == rhs.output_PID &&
    lhs.loop_time == rhs.loop_time &&
    lhs.IsDone == rhs.IsDone;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg::status_arm_<ContainerAllocator1> & lhs, const ::custom_msg::status_arm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::status_arm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::status_arm_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::status_arm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::status_arm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::status_arm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::status_arm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg::status_arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3c5e83e349a8305c77eff5da188ae4a";
  }

  static const char* value(const ::custom_msg::status_arm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3c5e83e349a8305ULL;
  static const uint64_t static_value2 = 0xc77eff5da188ae4aULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg::status_arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg/status_arm";
  }

  static const char* value(const ::custom_msg::status_arm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg::status_arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string junta\n"
"float32 pulsos_setpoint\n"
"float32 pulsos_contados\n"
"float32 pulsos_erro\n"
"float32 output_P\n"
"float32 output_I\n"
"float32 output_D\n"
"float32 output_PID\n"
"float32 loop_time\n"
"bool IsDone\n"
;
  }

  static const char* value(const ::custom_msg::status_arm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg::status_arm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.junta);
      stream.next(m.pulsos_setpoint);
      stream.next(m.pulsos_contados);
      stream.next(m.pulsos_erro);
      stream.next(m.output_P);
      stream.next(m.output_I);
      stream.next(m.output_D);
      stream.next(m.output_PID);
      stream.next(m.loop_time);
      stream.next(m.IsDone);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct status_arm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg::status_arm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg::status_arm_<ContainerAllocator>& v)
  {
    s << indent << "junta: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.junta);
    s << indent << "pulsos_setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.pulsos_setpoint);
    s << indent << "pulsos_contados: ";
    Printer<float>::stream(s, indent + "  ", v.pulsos_contados);
    s << indent << "pulsos_erro: ";
    Printer<float>::stream(s, indent + "  ", v.pulsos_erro);
    s << indent << "output_P: ";
    Printer<float>::stream(s, indent + "  ", v.output_P);
    s << indent << "output_I: ";
    Printer<float>::stream(s, indent + "  ", v.output_I);
    s << indent << "output_D: ";
    Printer<float>::stream(s, indent + "  ", v.output_D);
    s << indent << "output_PID: ";
    Printer<float>::stream(s, indent + "  ", v.output_PID);
    s << indent << "loop_time: ";
    Printer<float>::stream(s, indent + "  ", v.loop_time);
    s << indent << "IsDone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IsDone);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_MESSAGE_STATUS_ARM_H
