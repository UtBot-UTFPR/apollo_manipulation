// Generated by gencpp from file custom_msg/set_angles.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_MESSAGE_SET_ANGLES_H
#define CUSTOM_MSG_MESSAGE_SET_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg
{
template <class ContainerAllocator>
struct set_angles_
{
  typedef set_angles_<ContainerAllocator> Type;

  set_angles_()
    : set_OMB(0.0)
    , set_COT(0.0)
    , set_PUN(0.0)
    , set_GAR(false)
    , reset(false)
    , retry(false)
    , emergency_stop(false)
    , set_Kp_PUN(0.0)
    , set_Ki_PUN(0.0)
    , set_Kd_PUN(0.0)
    , set_Kp_OMB(0.0)
    , set_Ki_OMB(0.0)
    , set_Kd_OMB(0.0)
    , set_Kp_GAR(0.0)
    , set_Ki_GAR(0.0)
    , set_Kd_GAR(0.0)  {
    }
  set_angles_(const ContainerAllocator& _alloc)
    : set_OMB(0.0)
    , set_COT(0.0)
    , set_PUN(0.0)
    , set_GAR(false)
    , reset(false)
    , retry(false)
    , emergency_stop(false)
    , set_Kp_PUN(0.0)
    , set_Ki_PUN(0.0)
    , set_Kd_PUN(0.0)
    , set_Kp_OMB(0.0)
    , set_Ki_OMB(0.0)
    , set_Kd_OMB(0.0)
    , set_Kp_GAR(0.0)
    , set_Ki_GAR(0.0)
    , set_Kd_GAR(0.0)  {
  (void)_alloc;
    }



   typedef float _set_OMB_type;
  _set_OMB_type set_OMB;

   typedef float _set_COT_type;
  _set_COT_type set_COT;

   typedef float _set_PUN_type;
  _set_PUN_type set_PUN;

   typedef uint8_t _set_GAR_type;
  _set_GAR_type set_GAR;

   typedef uint8_t _reset_type;
  _reset_type reset;

   typedef uint8_t _retry_type;
  _retry_type retry;

   typedef uint8_t _emergency_stop_type;
  _emergency_stop_type emergency_stop;

   typedef float _set_Kp_PUN_type;
  _set_Kp_PUN_type set_Kp_PUN;

   typedef float _set_Ki_PUN_type;
  _set_Ki_PUN_type set_Ki_PUN;

   typedef float _set_Kd_PUN_type;
  _set_Kd_PUN_type set_Kd_PUN;

   typedef float _set_Kp_OMB_type;
  _set_Kp_OMB_type set_Kp_OMB;

   typedef float _set_Ki_OMB_type;
  _set_Ki_OMB_type set_Ki_OMB;

   typedef float _set_Kd_OMB_type;
  _set_Kd_OMB_type set_Kd_OMB;

   typedef float _set_Kp_GAR_type;
  _set_Kp_GAR_type set_Kp_GAR;

   typedef float _set_Ki_GAR_type;
  _set_Ki_GAR_type set_Ki_GAR;

   typedef float _set_Kd_GAR_type;
  _set_Kd_GAR_type set_Kd_GAR;





  typedef boost::shared_ptr< ::custom_msg::set_angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg::set_angles_<ContainerAllocator> const> ConstPtr;

}; // struct set_angles_

typedef ::custom_msg::set_angles_<std::allocator<void> > set_angles;

typedef boost::shared_ptr< ::custom_msg::set_angles > set_anglesPtr;
typedef boost::shared_ptr< ::custom_msg::set_angles const> set_anglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg::set_angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg::set_angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg::set_angles_<ContainerAllocator1> & lhs, const ::custom_msg::set_angles_<ContainerAllocator2> & rhs)
{
  return lhs.set_OMB == rhs.set_OMB &&
    lhs.set_COT == rhs.set_COT &&
    lhs.set_PUN == rhs.set_PUN &&
    lhs.set_GAR == rhs.set_GAR &&
    lhs.reset == rhs.reset &&
    lhs.retry == rhs.retry &&
    lhs.emergency_stop == rhs.emergency_stop &&
    lhs.set_Kp_PUN == rhs.set_Kp_PUN &&
    lhs.set_Ki_PUN == rhs.set_Ki_PUN &&
    lhs.set_Kd_PUN == rhs.set_Kd_PUN &&
    lhs.set_Kp_OMB == rhs.set_Kp_OMB &&
    lhs.set_Ki_OMB == rhs.set_Ki_OMB &&
    lhs.set_Kd_OMB == rhs.set_Kd_OMB &&
    lhs.set_Kp_GAR == rhs.set_Kp_GAR &&
    lhs.set_Ki_GAR == rhs.set_Ki_GAR &&
    lhs.set_Kd_GAR == rhs.set_Kd_GAR;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg::set_angles_<ContainerAllocator1> & lhs, const ::custom_msg::set_angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::set_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::set_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::set_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::set_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::set_angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::set_angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg::set_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f893037d084fc53525471a607a7aa8b3";
  }

  static const char* value(const ::custom_msg::set_angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf893037d084fc535ULL;
  static const uint64_t static_value2 = 0x25471a607a7aa8b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg::set_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg/set_angles";
  }

  static const char* value(const ::custom_msg::set_angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg::set_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 set_OMB\n"
"float32 set_COT\n"
"float32 set_PUN\n"
"bool 	set_GAR\n"
"\n"
"bool 	reset\n"
"bool 	retry\n"
"bool 	emergency_stop\n"
"\n"
"float32 set_Kp_PUN\n"
"float32 set_Ki_PUN\n"
"float32 set_Kd_PUN\n"
"\n"
"float32 set_Kp_OMB\n"
"float32 set_Ki_OMB\n"
"float32 set_Kd_OMB\n"
"\n"
"float32 set_Kp_GAR\n"
"float32 set_Ki_GAR\n"
"float32 set_Kd_GAR\n"
;
  }

  static const char* value(const ::custom_msg::set_angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg::set_angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set_OMB);
      stream.next(m.set_COT);
      stream.next(m.set_PUN);
      stream.next(m.set_GAR);
      stream.next(m.reset);
      stream.next(m.retry);
      stream.next(m.emergency_stop);
      stream.next(m.set_Kp_PUN);
      stream.next(m.set_Ki_PUN);
      stream.next(m.set_Kd_PUN);
      stream.next(m.set_Kp_OMB);
      stream.next(m.set_Ki_OMB);
      stream.next(m.set_Kd_OMB);
      stream.next(m.set_Kp_GAR);
      stream.next(m.set_Ki_GAR);
      stream.next(m.set_Kd_GAR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg::set_angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg::set_angles_<ContainerAllocator>& v)
  {
    s << indent << "set_OMB: ";
    Printer<float>::stream(s, indent + "  ", v.set_OMB);
    s << indent << "set_COT: ";
    Printer<float>::stream(s, indent + "  ", v.set_COT);
    s << indent << "set_PUN: ";
    Printer<float>::stream(s, indent + "  ", v.set_PUN);
    s << indent << "set_GAR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_GAR);
    s << indent << "reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset);
    s << indent << "retry: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.retry);
    s << indent << "emergency_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_stop);
    s << indent << "set_Kp_PUN: ";
    Printer<float>::stream(s, indent + "  ", v.set_Kp_PUN);
    s << indent << "set_Ki_PUN: ";
    Printer<float>::stream(s, indent + "  ", v.set_Ki_PUN);
    s << indent << "set_Kd_PUN: ";
    Printer<float>::stream(s, indent + "  ", v.set_Kd_PUN);
    s << indent << "set_Kp_OMB: ";
    Printer<float>::stream(s, indent + "  ", v.set_Kp_OMB);
    s << indent << "set_Ki_OMB: ";
    Printer<float>::stream(s, indent + "  ", v.set_Ki_OMB);
    s << indent << "set_Kd_OMB: ";
    Printer<float>::stream(s, indent + "  ", v.set_Kd_OMB);
    s << indent << "set_Kp_GAR: ";
    Printer<float>::stream(s, indent + "  ", v.set_Kp_GAR);
    s << indent << "set_Ki_GAR: ";
    Printer<float>::stream(s, indent + "  ", v.set_Ki_GAR);
    s << indent << "set_Kd_GAR: ";
    Printer<float>::stream(s, indent + "  ", v.set_Kd_GAR);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_MESSAGE_SET_ANGLES_H
